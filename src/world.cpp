// Class automatically generated by Dev-C++ New Class wizard

#include "world.h" // class's header file
#include "trigger.h"
#include "enemy.h"
#include "utils/json_file.h"
#include "utils/file_loader.h"
#include "log.h"

// class constructor
World::World()
{
}

World::World(const char *file, SoundHandler* sound_handler, bool tileExtractedOption)
{

  char aux_file[100];
  char tileset_file[100];

  JsonFileManager manager(file);
  manager.read();
  
  // Save json data into var
  const json& data = manager.getData();

  // Using pointers
  //auto resultPtr = manager.findPtr(data["layers"], "name", "FrontTiles");
  

  map_width = data["width"];
  map_height = data["height"];
  tileset_width = data["tilewidth"];
  tileset_height = data["tileheight"];
  std::cout << map_width << " .... " << map_height << std::endl;

  std::string file_name;
  if (data.contains("tilesets") && data["tilesets"].is_array()) {
    const json &tileset = data["tilesets"][0];
    file_name = tileset["name"].get<std::string>();
    tileset_count = tileset["tilecount"];
    tileset_columns = tileset["columns"];
    tileset_tile_width = tileset["tilewidth"];
    tileset_tile_height = tileset["tileheight"];
  }


  sprintf(aux_file, "%s", file);
  sprintf(tileset_file, "%s/%s", chopToDirectory(aux_file).c_str(), file_name.c_str());
 
  world_image = al_load_bitmap(tileset_file);
  assert(world_image && "Error: failed to load tileset\n");

  // Set transparent color for tileset
  al_convert_mask_to_alpha(world_image, al_map_rgb(255,0,255));


  // Initialize world    
  world_tiles = new Tile**[map_width];
  world_tiles_front = new Tile**[map_width];
  
  for (int x = 0 ; x < map_width ; x++ ) {
      world_tiles[x] = new Tile*[map_height];
      world_tiles_front[x] = new Tile*[map_height];
      for (int y = 0 ; y < map_height ; y++ ) {
        world_tiles[x][y] = new Tile();
        world_tiles_front[x][y] = new Tile();
      }
  }

  // First initialize tiles
  nlohmann::json tiles        = manager.find(data["layers"], "name", "Tiles")["data"];
  nlohmann::json tiles_front  = manager.find(data["layers"], "name", "FrontTiles")["data"];
  nlohmann::json tiles_prop   = manager.find(data["layers"], "name", "Collisions")["data"];

  int x = 0;
  int y = 0;

  std::cout << tiles.size() << std::endl;
  std::cout << tiles_front.size() << std::endl;
  std::cout << tiles_prop.size() << std::endl;

  for (std::size_t i = 0; i < tiles.size(); ++i)
  {

    int tile_attr = tiles[i];
    int tile_front_attr = tiles_front[i];
    int prop_attr = tiles_prop[i];

    int tile_id       = ((tile_attr != 0) ? tile_attr - 1: tile_attr);
    int tile_front_id = ((tile_front_attr != 0) ? tile_front_attr - 1: tile_front_attr);
    int tile_prop     = ((prop_attr != 0) ? prop_attr - 1: prop_attr);
    
    // Save the id of the tile aswell as the coordinates in the tileset bitmap
    world_tiles[x][y]->SetValue(tile_id);
    world_tiles[x][y]->SetType(tile_prop);
    world_tiles[x][y]->SetLeftUpX((tile_id % tileset_columns) * tileset_width);
    world_tiles[x][y]->SetLeftUpY(ceil(tile_id/tileset_columns)*tileset_height);
    world_tiles[x][y]->SetRightDownX((tile_id % tileset_columns) * tileset_width + tileset_width);
    world_tiles[x][y]->SetRightDownY(ceil((tile_id/tileset_columns))*tileset_height + tileset_height);
    // Same for tiles in front
    world_tiles_front[x][y]->SetValue(tile_front_id);
    world_tiles_front[x][y]->SetType(tile_prop);
    world_tiles_front[x][y]->SetLeftUpX((tile_front_id % tileset_columns) * tileset_width);
    world_tiles_front[x][y]->SetLeftUpY(ceil(tile_front_id/tileset_columns)*tileset_height);
    world_tiles_front[x][y]->SetRightDownX((tile_front_id % tileset_columns) * tileset_width + tileset_width);
    world_tiles_front[x][y]->SetRightDownY(ceil((tile_front_id/tileset_columns))*tileset_height + tileset_height);


    if (x == (map_width - 1)) {
      y++;
      x = 0;
    } else {
      x++;
    }
  }


  // Read platforms
  this->InitializePlatforms("../levels/level1_jump/platforms.xml");
  // Read items
  //this->InitializeItems("../levels/level1_jump/items.xml", sound_handler);
  // Read dynamic background objects
  //this->InitializeDynamicBackObjects("../levels/level1_jump/anim_tiles.xml");
  // Read blocks
  //this->InitializeBlocks("../levels/level1_jump/blocks.xml");
  // Read hazards
  //this->InitializeHazards("../levels/level1_jump/hazards.xml");
  // Read checkpoints
  this->InitializeCheckpoints("../levels/level1_jump/checkpoints.xml");
  // Read lasers
  //this->InitializeLasers("../levels/level1_jump/lasers.xml");
  // Read triggers
  this->InitializeTriggers("../levels/level1_jump/triggers.xml");
  // Read enemies
  //this->InitializeEnemies("../levels/level1_jump/enemies.xml");
  // Read camera views
  //this->InitializeCameraViews("../levels/level1_jump/camera_views.xml");


  jump_log_mask(LOG_INIT, "Finish load world map \n");
  shoot_exists = false;
  bomb_exists = false;
}

// class destructor
World::~World()
{
  // Delete tiles
//  for( int i = 0 ; i < tiles_m_y ; i++ ) {
//    for( int j = 0 ; j < tiles_m_x ; j++ ) {
//      delete tiles_mundo[i][j];
//    }
//    delete tiles_mundo[i];
//  }
//  delete tiles_mundo;
//    
//  al_destroy_bitmap(world_image);

  // Destroy platforms
  for (vector<Platform*>::iterator it = platforms.begin() ; it != platforms.end(); ++it) {
      delete *it;
  }
  for (list<Object*>::iterator it = objects.begin() ; it != objects.end(); ++it) {
      delete *it;
  }
  for (list<Block*>::iterator it = blocks.begin() ; it != blocks.end(); ++it) {
      delete *it;
  }
  for (list<Checkpoint*>::iterator it = checkpoints.begin() ; it != checkpoints.end(); ++it) {
      delete *it;
  }
  for (vector<CameraView*>::iterator it = camera_views.begin() ; it != camera_views.end(); ++it) {
      delete *it;
  }
}

void World::InitializePlatforms(const char* file) {
  int platform_id;
  int plat_ini_x;
  int plat_ini_y;
  int plat_width;
  int plat_height;
  int plat_visible;
  int plat_recursive;
  int plat_one_use;
  int plat_ini_state;
  int action_direction = OBJ_DIR_STOP;
  int action_desp;
  int action_wait;
  float action_speed;
  int action_cond;
  int num_actions;
  pugi::xml_document plat_file;

  jump_log_mask(LOG_INIT, "---------------------------\n");
  jump_log_mask(LOG_INIT, "| Initializing platforms  |\n");
  jump_log_mask(LOG_INIT, "---------------------------\n");

  // JsonFileManager manager(file);
  // manager.read();
  
  // // Save json data into var
  // const json& data = manager.getData(); 

  pugi::xml_parse_result result = plat_file.load_file(file);

  assert(result && "Error: loading world platform data\n");
  
  for (pugi::xml_node plat = plat_file.child("platforms").first_child();
       plat;
       plat = plat.next_sibling()) {
    // First read attributes
    platform_id = plat.attribute("id").as_int();
    jump_log_mask(LOG_INIT, "Platform id = %d\n", platform_id);

    pugi::xml_node plat_attrs = plat.child("attributes");
    plat_ini_x = plat_attrs.attribute("ini_x").as_int();
    plat_ini_y = plat_attrs.attribute("ini_y").as_int();
    plat_width = plat_attrs.attribute("width").as_int();
    plat_height = plat_attrs.attribute("height").as_int();
    plat_visible = plat_attrs.attribute("visible").as_int();
    plat_recursive = plat_attrs.attribute("recursive").as_int();
    plat_one_use = plat_attrs.attribute("one_use").as_int();
    plat_ini_state = strcmp(plat_attrs.attribute("ini_state").as_string(), "stop") == 0 ?
                       OBJ_STATE_STOP :
                       OBJ_STATE_MOVING;
    jump_log_mask(LOG_INIT, " - File = %s\n", plat_attrs.attribute("file").as_string());
    jump_log_mask(LOG_INIT, " - ini_x = %d\n", plat_ini_x);
    jump_log_mask(LOG_INIT, " - ini_y = %d\n", plat_ini_y);
    jump_log_mask(LOG_INIT, " - width = %d\n", plat_width);
    jump_log_mask(LOG_INIT, " - height = %d\n", plat_height);
    jump_log_mask(LOG_INIT, " - visible = %d\n", plat_visible);
    jump_log_mask(LOG_INIT, " - recursive = %d\n", plat_recursive);
    jump_log_mask(LOG_INIT, " - one_use = %d\n", plat_one_use);
    jump_log_mask(LOG_INIT, " - ini_state = %s\n", plat_attrs.attribute("ini_state").as_string());

    // Create platform
    Platform* world_platform = new Platform(plat_attrs.attribute("file").as_string(),
                                            platform_id,
                                            plat_ini_state,
                                            plat_ini_x,
                                            plat_ini_y,
                                            plat_width,
                                            plat_height,
                                            plat_visible,
                                            plat_recursive,
                                            plat_one_use);

    jump_log_mask(LOG_INIT, " - actions:\n");
    num_actions = 0;
    // Second, get actions
    pugi::xml_node actions = plat.child("actions");
    for (pugi::xml_node action = actions.first_child();
         action;
         action = action.next_sibling()) {
      jump_log_mask(LOG_INIT, "\t - action %d:\n", num_actions);
      if (strcmp(action.attribute("direction").as_string(), "stop") == 0) {
        action_direction = OBJ_DIR_STOP;
      } else if (strcmp(action.attribute("direction").as_string(), "right") == 0) {
        action_direction = OBJ_DIR_RIGHT;
      } else if (strcmp(action.attribute("direction").as_string(), "left") == 0) {
        action_direction = OBJ_DIR_LEFT;
      } else if (strcmp(action.attribute("direction").as_string(), "up") == 0) {
        action_direction = OBJ_DIR_UP;
      } else if (strcmp(action.attribute("direction").as_string(), "down") == 0) {
        action_direction = OBJ_DIR_DOWN;
      }
      action_desp = action.attribute("desp").as_int();
      action_wait = action.attribute("wait").as_int();
      action_speed = action.attribute("speed").as_float();      
      action_cond = action.attribute("cond").as_int();
      jump_log_mask(LOG_INIT, "\t\t - direction=%s\n", action.attribute("direction").as_string());
      jump_log_mask(LOG_INIT, "\t\t - desp=%d\n", action_desp);
      jump_log_mask(LOG_INIT, "\t\t - wait=%d\n", action_wait);
      jump_log_mask(LOG_INIT, "\t\t - speed=%f\n", action_speed);
      jump_log_mask(LOG_INIT, "\t\t - cond=%d\n", action_cond);

      world_platform->AddAction(action_direction,
                                action_desp,
                                action_wait,
                                action_speed,
                                action_cond);  // REVISIT: no actions for platforms yet
      num_actions++;
    }
    platforms.push_back(world_platform);

  }  

  jump_log_mask(LOG_INIT, "Platforms loaded ---------------------------\n");
}

void World::ResetPlatforms() {
    for (vector<Platform*>::iterator it = platforms.begin(); it != platforms.end(); it++) {
      (*it)->Reset();
    }
}

void World::InitializeHazards(const char* file) {
  int   hazard_id;
  int   hazard_ini_x;
  int   hazard_ini_y;
  int   hazard_width;
  int   hazard_height;
  bool  hazard_trigger;
  bool  hazard_stop_inactive;
  int   action_direction = OBJ_DIR_STOP;
  int   action_desp;
  int   action_wait;
  float action_speed;
  bool  action_deactivate;
  int   action_cond;
  int   num_actions;  
  pugi::xml_document hazard_file;

  jump_log_mask(LOG_INIT, "---------------------------\n");
  jump_log_mask(LOG_INIT, "| Initializing hazards    |\n");
  jump_log_mask(LOG_INIT, "---------------------------\n");

  pugi::xml_parse_result result = hazard_file.load_file(file);

  assert(result && "Error: loading world hazard data\n");
  
  for (pugi::xml_node hazard = hazard_file.child("hazards").first_child();
       hazard;
       hazard = hazard.next_sibling()) {
    // First read attributes
    hazard_id = hazard.attribute("id").as_int();
    jump_log_mask(LOG_INIT, "Hazard id = %d\n", hazard_id);

    pugi::xml_node hazard_attrs = hazard.child("attributes");
    hazard_ini_x                = hazard_attrs.attribute("ini_x").as_int();
    hazard_ini_y                = hazard_attrs.attribute("ini_y").as_int();
    hazard_width                = hazard_attrs.attribute("width").as_int();
    hazard_height               = hazard_attrs.attribute("height").as_int();
    hazard_trigger              = hazard_attrs.attribute("trigger").as_bool();
    hazard_stop_inactive        = hazard_attrs.attribute("stop_inactive").as_bool();


    jump_log_mask(LOG_INIT, " - File = %s\n",          hazard_attrs.attribute("file").as_string());
    jump_log_mask(LOG_INIT, " - ini_x = %d\n",         hazard_ini_x);
    jump_log_mask(LOG_INIT, " - ini_y = %d\n",         hazard_ini_y);
    jump_log_mask(LOG_INIT, " - width = %d\n",         hazard_width);
    jump_log_mask(LOG_INIT, " - height = %d\n",        hazard_height);
    jump_log_mask(LOG_INIT, " - trigger = %d\n",       hazard_trigger);
    jump_log_mask(LOG_INIT, " - stop_inactive = %d\n", hazard_stop_inactive);

    // Create hazard
    Hazard* world_hazard = new Hazard(hazard_attrs.attribute("file").as_string(),
                                      hazard_id,
                                      hazard_ini_x,
                                      hazard_ini_y,
                                      hazard_width,
                                      hazard_height,
                                      hazard_trigger,
                                      hazard_stop_inactive);

    jump_log_mask(LOG_INIT, " - actions:\n");
    num_actions = 0;
    // Second, get actions
    pugi::xml_node actions = hazard.child("actions");
    for (pugi::xml_node action = actions.first_child();
         action;
         action = action.next_sibling()) {
      jump_log_mask(LOG_INIT, "\t - action %d:\n", num_actions);
      action_deactivate = false;
      if (strcmp(action.attribute("direction").as_string(), "stop") == 0) {
        action_direction = OBJ_DIR_STOP;
      } else if (strcmp(action.attribute("direction").as_string(), "right") == 0) {
        action_direction = OBJ_DIR_RIGHT;
      } else if (strcmp(action.attribute("direction").as_string(), "left") == 0) {
        action_direction = OBJ_DIR_LEFT;
      } else if (strcmp(action.attribute("direction").as_string(), "up") == 0) {
        action_direction = OBJ_DIR_UP;
      } else if (strcmp(action.attribute("direction").as_string(), "down") == 0) {
        action_direction = OBJ_DIR_DOWN;
      } else if (strcmp(action.attribute("direction").as_string(), "deactivate") == 0) {
        action_direction = OBJ_DIR_STOP;
        action_deactivate = true;
      }
      action_desp = action.attribute("desp").as_int();
      action_wait = action.attribute("wait").as_int();
      action_speed = action.attribute("speed").as_float();
      action_cond = action.attribute("cond").as_int();
      jump_log_mask(LOG_INIT, "\t\t - direction=%s\n", action.attribute("direction").as_string());
      jump_log_mask(LOG_INIT, "\t\t - deactivate=%d\n", (int)action_deactivate);
      jump_log_mask(LOG_INIT, "\t\t - desp=%d\n", action_desp);
      jump_log_mask(LOG_INIT, "\t\t - wait=%d\n", action_wait);
      jump_log_mask(LOG_INIT, "\t\t - speed=%f\n", action_speed);
      jump_log_mask(LOG_INIT, "\t\t - wait=%d\n", action_cond);

      world_hazard->AddAction(action_direction,
                              action_desp,
                              action_wait,
                              action_speed,
                              !action_deactivate,
                              action_cond);
      num_actions++;
    }
    objects.push_back(world_hazard);

  }  

  jump_log_mask(LOG_INIT, "---------------------------\n");
}

void World::InitializeItems(const char* file, SoundHandler* sound_handler) {
  int item_id;
  int item_ini_x;
  int item_ini_y;
  int item_width;
  int item_height;  
  pugi::xml_document item_file;

  jump_log_mask(LOG_INIT, "---------------------------\n");
  jump_log_mask(LOG_INIT, "| Initializing items      |\n");
  jump_log_mask(LOG_INIT, "---------------------------\n");

  pugi::xml_parse_result result = item_file.load_file(file);

  assert(result && "Error: loading world items data\n");
 
  for (pugi::xml_node item = item_file.child("items").first_child();
       item;
       item = item.next_sibling()) {
    // First read attributes
    item_id = item.attribute("id").as_int();
    jump_log_mask(LOG_INIT, "Item id = %d\n", item_id);

    pugi::xml_node item_attrs = item.child("attributes");
    item_ini_x  = item_attrs.attribute("ini_x").as_int();
    item_ini_y  = item_attrs.attribute("ini_y").as_int();
    item_width  = item_attrs.attribute("width").as_int();
    item_height = item_attrs.attribute("height").as_int();

    jump_log_mask(LOG_INIT, " - File = %s\n", item_attrs.attribute("file").as_string());
    jump_log_mask(LOG_INIT, " - ini_x = %d\n", item_ini_x);
    jump_log_mask(LOG_INIT, " - ini_y = %d\n", item_ini_y);
    jump_log_mask(LOG_INIT, " - width = %d\n", item_width);
    jump_log_mask(LOG_INIT, " - height = %d\n", item_height);

    // Create item
    Item* world_item = new Item(item_id);
    world_item->Init(item_attrs.attribute("file").as_string(),
                     item_ini_x, item_ini_y,
                     item_width, item_height,
                     true, true,
                     OBJ_STATE_STOP, OBJ_DIR_STOP,
                     0.1, 3.0, 1.0,
                     0.1, 3.0, 1.0);
    world_item->RegisterSoundHandler(sound_handler);

    objects.push_back(world_item);
  }  

  jump_log_mask(LOG_INIT, "---------------------------\n");
}

void World::InitializeDynamicBackObjects(const char* file) {
  int dyn_obj_id;
  int dyn_obj_ini_x;
  int dyn_obj_ini_y;
  int dyn_obj_width;
  int dyn_obj_height;
  int dyn_obj_skip_num_anims;
  pugi::xml_document dyn_obj_file;

  jump_log_mask(LOG_INIT, "------------------------------------------\n");
  jump_log_mask(LOG_INIT, "| Initializing dynamic backgound objects |\n");
  jump_log_mask(LOG_INIT, "------------------------------------------\n");

  pugi::xml_parse_result result = dyn_obj_file.load_file(file);

  assert(result && "Error: loading world dynamic background objects data\n");
 
  for (pugi::xml_node dyn_obj = dyn_obj_file.child("anim_objects").first_child();
       dyn_obj;
       dyn_obj = dyn_obj.next_sibling()) {
    // First read attributes
    dyn_obj_id = dyn_obj.attribute("id").as_int();
    jump_log_mask(LOG_INIT, "Dynamic object id = %d\n", dyn_obj_id);

    pugi::xml_node dyn_obj_attrs = dyn_obj.child("attributes");
    dyn_obj_ini_x                = dyn_obj_attrs.attribute("ini_x").as_int();
    dyn_obj_ini_y                = dyn_obj_attrs.attribute("ini_y").as_int();
    dyn_obj_width                = dyn_obj_attrs.attribute("width").as_int();
    dyn_obj_height               = dyn_obj_attrs.attribute("height").as_int();
    dyn_obj_skip_num_anims       = dyn_obj_attrs.attribute("skip_num_anims").as_int();

    jump_log_mask(LOG_INIT, " - File = %s\n", dyn_obj_attrs.attribute("file").as_string());
    jump_log_mask(LOG_INIT, " - ini_x = %d\n", dyn_obj_ini_x);
    jump_log_mask(LOG_INIT, " - ini_y = %d\n", dyn_obj_ini_y);
    jump_log_mask(LOG_INIT, " - width = %d\n", dyn_obj_width);
    jump_log_mask(LOG_INIT, " - height = %d\n", dyn_obj_height);
    jump_log_mask(LOG_INIT, " - skip_anims = %d\n", dyn_obj_skip_num_anims);

    // Create dyn_obj
    StaticObject* world_dyn_obj = new StaticObject(dyn_obj_id);
    world_dyn_obj->Init(dyn_obj_attrs.attribute("file").as_string(),
                        dyn_obj_ini_x, dyn_obj_ini_y,
                        dyn_obj_width, dyn_obj_height,
                        dyn_obj_skip_num_anims);

    back_objects.push_back(world_dyn_obj);
  }  

  jump_log_mask(LOG_INIT, "---------------------------\n");
}

void World::InitializeBlocks(const char* file) {
  int  block_id;
  int  block_ini_x;
  int  block_ini_y;
  int  block_width;
  int  block_height;
  bool block_exploits;
  pugi::xml_document block_file;

  jump_log_mask(LOG_INIT, "------------------------------\n");
  jump_log_mask(LOG_INIT, "| Initializing block objects |\n");
  jump_log_mask(LOG_INIT, "-----------------------------\n");

  pugi::xml_parse_result result = block_file.load_file(file);

  assert(result && "Error: loading world block objects data\n");
 
  for (pugi::xml_node block = block_file.child("blocks").first_child();
       block;
       block = block.next_sibling()) {
    // First read attributes
    block_id = block.attribute("id").as_int();
    jump_log_mask(LOG_INIT, "Block object id = %d\n", block_id);

    pugi::xml_node block_attrs = block.child("attributes");
    block_ini_x                = block_attrs.attribute("ini_x").as_int();
    block_ini_y                = block_attrs.attribute("ini_y").as_int();
    block_width                = block_attrs.attribute("width").as_int();
    block_height               = block_attrs.attribute("height").as_int();
    block_exploits             = block_attrs.attribute("exploits").as_bool();

    jump_log_mask(LOG_INIT, " - File = %s\n", block_attrs.attribute("file").as_string());
    jump_log_mask(LOG_INIT, " - ini_x = %d\n", block_ini_x);
    jump_log_mask(LOG_INIT, " - ini_y = %d\n", block_ini_y);
    jump_log_mask(LOG_INIT, " - width = %d\n", block_width);
    jump_log_mask(LOG_INIT, " - height = %d\n", block_height);
    jump_log_mask(LOG_INIT, " - exploits = %d\n", (int)block_exploits);

    // Create block
    Block* world_block = new Block(block_id);
    world_block->Init(block_attrs.attribute("file").as_string(),
                      block_ini_x, block_ini_y,
                      block_width, block_height,
                      block_exploits);

    blocks.push_back(world_block);
  }  

  jump_log_mask(LOG_INIT, "---------------------------\n");
}

void World::InitializeCheckpoints(const char* file) {
  int chk_id;
  int chk_x;
  int chk_y;
  int chk_width;
  int chk_height;
  int pl_x;
  int pl_y;
  int pl_face;
  pugi::xml_document chk_file;
  vector<vector<int> > nxt_chks;

  jump_log_mask(LOG_INIT, "------------------------------------\n");
  jump_log_mask(LOG_INIT, "| Initializing checkpoints objects |\n");
  jump_log_mask(LOG_INIT, "------------------------------------\n");

  pugi::xml_parse_result result = chk_file.load_file(file);

  assert(result && "Error: loading world checkpoints data\n");
 
  for (pugi::xml_node chk = chk_file.child("checkpoints").first_child();
       chk;
       chk = chk.next_sibling()) {
    // First read attributes
    chk_id = chk.attribute("id").as_int();
    jump_log_mask(LOG_INIT, "Checkpoint id = %d\n", chk_id);
    
    chk_x      = chk.attribute("chk_x").as_int();
    chk_y      = chk.attribute("chk_y").as_int();
    chk_width  = chk.attribute("chk_width").as_int();
    chk_height = chk.attribute("chk_height").as_int();
    pl_x       = chk.attribute("pl_x").as_int();
    pl_y       = chk.attribute("pl_y").as_int();
    if (strcmp(chk.attribute("pl_face").as_string(), "right") == 0) {
      pl_face = CHAR_DIR_RIGHT;
    } else if (strcmp(chk.attribute("pl_face").as_string(), "left") == 0) {
      pl_face = CHAR_DIR_LEFT;
    } else {
      assert(false && "Error: incorrect player direction for checkpoint\n");
    }

    string nxt_chks_str(chk.attribute("nxt_chks").as_string());
    vector<int> nxt_chks_int;

    stringstream ss(nxt_chks_str);
    string item;    
    while (getline(ss, item, ',')) {
       nxt_chks_int.push_back(stoi(item));
    }
    nxt_chks.push_back(nxt_chks_int);

    jump_log_mask(LOG_INIT, " - chk_x = %d\n", chk_x);
    jump_log_mask(LOG_INIT, " - chk_y = %d\n", chk_y);
    jump_log_mask(LOG_INIT, " - chk_width = %d\n", chk_width);
    jump_log_mask(LOG_INIT, " - chk_height = %d\n", chk_height);
    jump_log_mask(LOG_INIT, " - pl_x = %d\n", pl_x);
    jump_log_mask(LOG_INIT, " - pl_y = %d\n", pl_y);
    jump_log_mask(LOG_INIT, " - pl_face = %d\n", pl_face);
    jump_log_mask(LOG_INIT, " - nxt_chks=");
    for(vector<int>::iterator it = nxt_chks_int.begin(); it != nxt_chks_int.end(); it++) {
      jump_log_mask(LOG_INIT, "%d ", *it);
    }
    jump_log_mask(LOG_INIT, "\n");

    // Create checkpoint
    Checkpoint* world_chk = new Checkpoint(chk_id, chk_x, chk_y, chk_width, chk_height, pl_x, pl_y, pl_face);
    checkpoints.push_back(world_chk);
  }  

  int num_chk = 0;  
  // Once all checkpoints are read, the proceed to link them based on nxt_chks
  for (list<Checkpoint*>::iterator it1 = checkpoints.begin(); it1 != checkpoints.end(); it1++) {
    Checkpoint* chk_orig = *it1;
    // Search for all the checkpoints to be linked
    for (vector<int>::iterator it2 = nxt_chks[num_chk].begin(); it2 != nxt_chks[num_chk].end(); it2++) {
      int num_chk_to_link = *it2;
      // Search this id in the checkpoints list and get the pointer
      bool found = false;
      for (list<Checkpoint*>:: iterator it3 = checkpoints.begin(); it3 != checkpoints.end(); it3++) {
         Checkpoint* chk_to_link = *it3;
         if (chk_to_link->GetChkId() == num_chk_to_link) {
           chk_orig->AddNextCheckpoint(chk_to_link);
           found = true;
         }
      }
      // If not found then return an error
      if (!found) {
          fprintf(stderr, "Error: link checkpoint broken for chk_id=%d\n", num_chk);
	  assert(false);
      }
    }
    num_chk++;
  }

  current_checkpoint = *(checkpoints.begin());
  target_checkpoints = current_checkpoint->GetNextCheckpoints();

  jump_log_mask(LOG_INIT, "---------------------------\n");
}


void World::InitializeTriggers(const char* file) {
  int  trig_id;
  int  trig_x;
  int  trig_y;
  int  trig_width;
  int  trig_height;
  bool trig_recursive;
  int  trig_action;
  int  trig_face;
  int  target_type;
  int  target_id;
  int  target_delay;
  bool target_trigger;
  bool target_trigger_cond;
  int  num_targets;
  pugi::xml_document trig_file;

  assert(file != nullptr);

  jump_log_mask(LOG_INIT, "---------------------------\n");
  jump_log_mask(LOG_INIT, "| Initializing triggers   |\n");
  jump_log_mask(LOG_INIT, "---------------------------\n");

  pugi::xml_parse_result result = trig_file.load_file(file);

  assert(result && "Error: loading world trigger data\n");
  
  for (pugi::xml_node trig = trig_file.child("triggers").first_child();
       trig;
       trig = trig.next_sibling()) {
    // First read attributes
    trig_id = trig.attribute("id").as_int();
    jump_log_mask(LOG_INIT, "Trigger id = %d\n", trig_id);

    pugi::xml_node trig_attrs = trig.child("attributes");
    trig_x         = trig_attrs.attribute("x").as_int();
    trig_y         = trig_attrs.attribute("y").as_int();
    trig_width     = trig_attrs.attribute("width").as_int();
    trig_height    = trig_attrs.attribute("height").as_int();
    trig_recursive = trig_attrs.attribute("recursive").as_bool();
    if ((strcmp(trig_attrs.attribute("action").as_string(), "enters")) == 0) {
      trig_action = ACTION_EVENT_ENTERS;
    } else if ((strcmp(trig_attrs.attribute("action").as_string(), "stays")) == 0) {
      trig_action = ACTION_EVENT_STAYS;
    } else if ((strcmp(trig_attrs.attribute("action").as_string(), "exits")) == 0) {
      trig_action = ACTION_EVENT_EXITS;
    } else if ((strcmp(trig_attrs.attribute("action").as_string(), "hits")) == 0) {
      trig_action = ACTION_EVENT_HITS;
    } else {
      assert(false && "Error: wrong action type for trigger!\n");
    }

    if ((strcmp(trig_attrs.attribute("face").as_string(), "any")) == 0) {
      trig_face = ACTION_FACE_ANY;
    } else if ((strcmp(trig_attrs.attribute("face").as_string(), "right")) == 0) {
      trig_face = ACTION_FACE_RIGHT;
    } else if ((strcmp(trig_attrs.attribute("face").as_string(), "left")) == 0) {
      trig_face = ACTION_FACE_LEFT;
    } else {
      assert(false && "Error: wrong action face for trigger!\n");
    }
    
    jump_log_mask(LOG_INIT, " - x = %d\n",      trig_x);
    jump_log_mask(LOG_INIT, " - y = %d\n",      trig_y);
    jump_log_mask(LOG_INIT, " - width = %d\n",  trig_width);
    jump_log_mask(LOG_INIT, " - height = %d\n", trig_height);
    jump_log_mask(LOG_INIT, " - recursive = %d\n", trig_recursive);
    jump_log_mask(LOG_INIT, " - action = %d\n", trig_action);
    jump_log_mask(LOG_INIT, " - face = %d\n",   trig_face);    

    // Create platform
    Trigger* world_trigger = new Trigger(trig_id,
                                         trig_x,
                                         trig_y,
                                         trig_width,
                                         trig_height,
                                         trig_action,
                                         trig_face,
                                         trig_recursive);

    jump_log_mask(LOG_INIT, " - targets:\n");
    num_targets = 0;
    // Second, get targets
    pugi::xml_node targets = trig.child("targets");
    for (pugi::xml_node target = targets.first_child();
         target;
         target = target.next_sibling()) {
      jump_log_mask(LOG_INIT, "\t - target %d:\n", num_targets);
      if (strcmp(target.attribute("type").as_string(), "platform") == 0) {
        target_type = OBJ_PLATFORM;
      } else if (strcmp(target.attribute("type").as_string(), "laser") == 0) {
        target_type = OBJ_LASER;
      } else if (strcmp(target.attribute("type").as_string(), "hazard") == 0) {
        target_type = OBJ_HAZARD;
      } else {
        assert(false && "Error: wrong target id in trigger definiton!\n");
      }
      target_id = target.attribute("id").as_int();
      target_delay = target.attribute("delay").as_int();
      target_trigger = target.attribute("trigger").as_bool();
      target_trigger_cond = target.attribute("trigger_cond").as_bool();
      jump_log_mask(LOG_INIT, "\t\t - type=%s\n", target.attribute("type").as_string());
      jump_log_mask(LOG_INIT, "\t\t - id=%d\n", target_id);
      jump_log_mask(LOG_INIT, "\t\t - delay=%d\n", target_delay);
      jump_log_mask(LOG_INIT, "\t\t - trigger=%d\n", target_trigger);
      jump_log_mask(LOG_INIT, "\t\t - trigger_cond=%d\n", target_trigger_cond);

      Object* target_ptr;
      if (target_type == OBJ_PLATFORM)
        target_ptr = (Object*)GetPlatform(target_id);
      else if (target_type == OBJ_LASER)
        target_ptr = (Object*)GetLaser(target_id);
      else
        target_ptr = (Object*)GetHazard(target_id);

      assert(target_ptr != nullptr && "Error: trying to associate an invalid target for this trigger!\n");

      world_trigger->AddTarget(target_ptr, target_delay, target_trigger, target_trigger_cond);

      num_targets++;
    }

    triggers.push_back(world_trigger);

  }  

  jump_log_mask(LOG_INIT, "---------------------------\n");
}

void World::InitializeLasers(const char* file) {
  int   laser_id;
  int   laser_x;
  int   laser_y;
  int   laser_bb_x;
  int   laser_bb_y;
  int   laser_bb_width;
  int   laser_bb_height;
  int   laser_type;
  float laser_speed;
  bool  laser_onehot;
  int   laser_direction;
  int   laser_default_trigger;
  pugi::xml_document laser_file;  

  jump_log_mask(LOG_INIT, "------------------------------\n");
  jump_log_mask(LOG_INIT, "| Initializing laser objects |\n");
  jump_log_mask(LOG_INIT, "------------------------------\n");

  pugi::xml_parse_result result = laser_file.load_file(file);

  assert(result && "Error: loading world lasers data\n");
 
  for (pugi::xml_node laser = laser_file.child("lasers").first_child();
       laser;
       laser = laser.next_sibling()) {
    // First read attributes
    laser_id = laser.attribute("id").as_int();
    jump_log_mask(LOG_INIT, "Laser id = %d\n", laser_id);
    
    laser_x         = laser.attribute("x").as_int();
    laser_y         = laser.attribute("y").as_int();
    laser_bb_x      = laser.attribute("bb_x").as_int();
    laser_bb_y      = laser.attribute("bb_y").as_int();
    laser_bb_width  = laser.attribute("bb_width").as_int();
    laser_bb_height = laser.attribute("bb_height").as_int();
    if (strcmp(laser.attribute("type").as_string(), "horizontal") == 0) {
      laser_type = LASER_TYPE_HORIZONTAL;
    } else if (strcmp(laser.attribute("type").as_string(), "vertical") == 0) {
      laser_type = LASER_TYPE_VERTICAL;
    } else if (strcmp(laser.attribute("type").as_string(), "diagonal") == 0) {
      laser_type = LASER_TYPE_DIAGONAL;
    } else {
      assert(false && "Error: incorrect type for laser\n");
    }
    laser_speed = laser.attribute("speed").as_float();
    laser_onehot = !laser.attribute("recursive").as_bool();
    laser_default_trigger = laser.attribute("default_trigger").as_int();
    if (strcmp(laser.attribute("direction").as_string(), "right") == 0) {
      laser_direction = OBJ_DIR_RIGHT;
    } else if (strcmp(laser.attribute("direction").as_string(), "left") == 0) {
      laser_direction = OBJ_DIR_LEFT;
    } else {
      assert(false && "Error: incorrect direction for laser\n");
    }
    jump_log_mask(LOG_INIT, " - x = %d\n", laser_x);
    jump_log_mask(LOG_INIT, " - y = %d\n", laser_y);
    jump_log_mask(LOG_INIT, " - bb_x = %d\n", laser_bb_x);
    jump_log_mask(LOG_INIT, " - bb_y = %d\n", laser_bb_y);
    jump_log_mask(LOG_INIT, " - bb_width = %d\n", laser_bb_width);
    jump_log_mask(LOG_INIT, " - bb_height = %d\n", laser_bb_height);
    jump_log_mask(LOG_INIT, " - type = %d\n", laser_type);
    jump_log_mask(LOG_INIT, " - onehot = %d\n", laser_onehot);
    jump_log_mask(LOG_INIT, " - direction = %d\n", laser_direction);
    jump_log_mask(LOG_INIT, " - speed = %f\n", laser_speed);
    jump_log_mask(LOG_INIT, " - default_trigger = %d\n", laser_default_trigger);

    // Create checkpoint
    Laser* world_laser = new Laser(laser.attribute("file").as_string(),
                                   laser_id,
                                   laser_x, laser_y,
                                   laser_bb_x, laser_bb_y,
                                   laser_bb_width, laser_bb_height,
                                   laser_type, laser_onehot, laser_speed, laser_direction, laser_default_trigger);


    objects.push_back(world_laser);
  }  

  jump_log_mask(LOG_INIT, "---------------------------\n");
}

void World::InitializeEnemies(const char* file) {
  int   enemy_id;
  int   enemy_x;
  int   enemy_y;
  int   enemy_bb_x;
  int   enemy_bb_y;  
  int   enemy_bb_width;
  int   enemy_bb_height;
  int   enemy_direction;
  float enemy_speed_x;
  float enemy_speed_y;
  int   enemy_ia_type;
  int   enemy_ia_random;
  int   enemy_ia_randomness;
  int   enemy_ia_block_steps;
  int   enemy_ia_orig_x;
  int   enemy_ia_orig_y;
  int   enemy_ia_limit_x;
  int   enemy_ia_limit_y;
  pugi::xml_document enemy_file;

  jump_log_mask(LOG_INIT, "------------------------------------\n");
  jump_log_mask(LOG_INIT, "| Initializing enemies             |\n");
  jump_log_mask(LOG_INIT, "------------------------------------\n");

  pugi::xml_parse_result result = enemy_file.load_file(file);

  assert(result && "Error: loading world enemies data\n");
 
  for (pugi::xml_node enemy = enemy_file.child("enemies").first_child();
       enemy;
       enemy = enemy.next_sibling()) {
    // First read attributes
    enemy_id = enemy.attribute("id").as_int();
    jump_log_mask(LOG_INIT, "Enemy id = %d\n", enemy_id);
    
    enemy_x         = enemy.attribute("x").as_int();
    enemy_y         = enemy.attribute("y").as_int();
    enemy_bb_x      = enemy.attribute("bb_x").as_int();
    enemy_bb_y      = enemy.attribute("bb_y").as_int();
    enemy_bb_width  = enemy.attribute("bb_width").as_int();
    enemy_bb_height = enemy.attribute("bb_height").as_int();
    enemy_speed_x   = enemy.attribute("speed_x").as_float();
    enemy_speed_y   = enemy.attribute("speed_y").as_float();
    if (strcmp(enemy.attribute("direction").as_string(), "right") == 0) {
      enemy_direction = CHAR_DIR_RIGHT;
    } else if (strcmp(enemy.attribute("direction").as_string(), "left") == 0) {
      enemy_direction = CHAR_DIR_LEFT;
    } else {
      assert(false && "Error: incorrect direction for enemy\n");
    }
    if (strcmp(enemy.attribute("ia_type").as_string(), "walker") == 0) {
      enemy_ia_type = ENEMY_IA_WALKER;
    } else if (strcmp(enemy.attribute("ia_type").as_string(), "chaser") == 0) {
      enemy_ia_type = ENEMY_IA_CHASER;
    } else {
      assert(false && "Error: incorrect ia type for enemy\n");
    }
    enemy_ia_random      = enemy.attribute("ia_random").as_bool();
    enemy_ia_randomness  = enemy.attribute("ia_randomness").as_int();
    enemy_ia_block_steps = enemy.attribute("ia_block_steps").as_int();
    enemy_ia_orig_x      = enemy.attribute("ia_orig_x").as_int();
    enemy_ia_orig_y      = enemy.attribute("ia_orig_y").as_int();
    enemy_ia_limit_x     = enemy.attribute("ia_limit_x").as_int();
    enemy_ia_limit_y     = enemy.attribute("ia_limit_y").as_int();

    jump_log_mask(LOG_INIT, " - file = %s\n", enemy.attribute("file").as_string());
    jump_log_mask(LOG_INIT, " - x = %d\n", enemy_x);
    jump_log_mask(LOG_INIT, " - y = %d\n", enemy_y);
    jump_log_mask(LOG_INIT, " - bb_x = %d\n", enemy_bb_x);
    jump_log_mask(LOG_INIT, " - bb_y = %d\n", enemy_bb_y);
    jump_log_mask(LOG_INIT, " - bb_width = %d\n", enemy_bb_width);
    jump_log_mask(LOG_INIT, " - bb_height = %d\n", enemy_bb_height);
    jump_log_mask(LOG_INIT, " - speed_x=%f\n", enemy_speed_x);
    jump_log_mask(LOG_INIT, " - speed_y=%f\n", enemy_speed_y);
    jump_log_mask(LOG_INIT, " - direction = %d\n", enemy_direction);
    jump_log_mask(LOG_INIT, " - ia_type = %d\n", enemy_ia_type);
    jump_log_mask(LOG_INIT, " - ia_random = %d\n", enemy_ia_random);
    jump_log_mask(LOG_INIT, " - ia_randomness = %d\n", enemy_ia_randomness);
    jump_log_mask(LOG_INIT, " - ia_block_steps = %d\n", enemy_ia_block_steps);
    jump_log_mask(LOG_INIT, " - ia_orig_x = %d\n", enemy_ia_orig_x);
    jump_log_mask(LOG_INIT, " - ia_orig_y = %d\n", enemy_ia_orig_y);
    jump_log_mask(LOG_INIT, " - ia_limit_x = %d\n", enemy_ia_limit_x);
    jump_log_mask(LOG_INIT, " - ia_limit_y = %d\n", enemy_ia_limit_y);

    // Create enemy
    Enemy* world_enemy = new Enemy(enemy.attribute("file").as_string(),
                                   enemy_id,
                                   enemy_x, enemy_y,
                                   enemy_bb_x, enemy_bb_y, enemy_bb_width, enemy_bb_height,
                                   enemy_direction, enemy_speed_x, enemy_speed_y,
                                   enemy_ia_type, enemy_ia_random, enemy_ia_randomness, enemy_ia_block_steps,
                                   enemy_ia_orig_x, enemy_ia_orig_y, enemy_ia_limit_x, enemy_ia_limit_y);
    enemies.push_back(world_enemy);
  }  

  jump_log_mask(LOG_INIT, "---------------------------\n");
}

void World::InitializeCameraViews(const char* file) {
  int view_id;
  int left_up_x;
  int left_up_y;
  int right_down_x;
  int right_down_y;
  pugi::xml_document view_file;

  jump_log_mask(LOG_INIT, "------------------------------------\n");
  jump_log_mask(LOG_INIT, "| Initializing camera views        |\n");
  jump_log_mask(LOG_INIT, "------------------------------------\n");

  pugi::xml_parse_result result = view_file.load_file(file);

  assert(result && "Error: loading world camera view data\n");
 
  for (pugi::xml_node view = view_file.child("views").first_child();
       view;
       view = view.next_sibling()) {
    // First read attributes
    view_id = view.attribute("id").as_int();
    jump_log_mask(LOG_INIT, "View id = %d\n", view_id);
    
    left_up_x    = view.attribute("left_up_x").as_int();
    left_up_y    = view.attribute("left_up_y").as_int();
    right_down_x = view.attribute("right_down_x").as_int();
    right_down_y = view.attribute("right_down_y").as_int();

    jump_log_mask(LOG_INIT, " - left_up_x = %d\n", left_up_x);
    jump_log_mask(LOG_INIT, " - left_up_y = %d\n", left_up_y);
    jump_log_mask(LOG_INIT, " - right_down_x = %d\n", right_down_x);
    jump_log_mask(LOG_INIT, " - right_down_y = %d\n", right_down_y);

    // Create camera view
    CameraView* world_view = new CameraView(view_id, left_up_x, left_up_y, right_down_x, right_down_y);
    camera_views.push_back(world_view);
  }

  jump_log_mask(LOG_INIT, "---------------------------\n");
}

int World::GetMapWidth() {
   return map_width;
}

int World::GetMapHeight() {
  return map_height;
}

int World::GetTilesetWidth() {
  return tileset_width;
}

int World::GetTilesetHeight() {
  return tileset_height;
}

int World::GetTilesetCount() {
  return tileset_count;
}

int World::GetTilesetColumns() {
  return tileset_columns;
}

int World::GetTilesetTileWidth() {
  return tileset_tile_width;
}

int World::GetTilesetTileHeight() {
  return tileset_tile_height;
}

Tile* World::GetTile(int x, int y) {
  return world_tiles[x][y];
}

Tile* World::GetTileFront(int x, int y) {
  return world_tiles_front[x][y];
}

bool World::IsTileCollisionable(int x, int y) {
  return (world_tiles[x][y]->GetType() == TILE_COL);
}

bool World::IsTileCollisionableDown(int x, int y) {
  return ((world_tiles[x][y]->GetType() == TILE_COL) ||
          (world_tiles[x][y]->GetType() == TILE_COL_DOWN) ||
          (world_tiles[x][y]->GetType() == TILE_STAIRS_TOP));
}

int World::GetTileValue(int x, int y) {
  return world_tiles[x][y]->GetValue();
}

int World::GetTileValueByCoord(int x, int y)
{
  int tile_x = x / tileset_tile_width;
  int tile_y = y / tileset_tile_height;

  return world_tiles[tile_x][tile_y]->GetValue();
}

Tile* World::GetTileByCoord(int x, int y)
{
  int tile_x = x / tileset_tile_width;
  int tile_y = y / tileset_tile_height;

  return world_tiles[tile_x][tile_y];
}

void World::WorldStep(Character* player) {
  // Perform an step of all elements belonging to the world level
  for (vector<Platform*>::iterator it = platforms.begin() ; it != platforms.end(); ++it) {
      (*it)->PlatformStep();
      // REVISIT: remove this code
      if (player->GetState() == CHAR_STATE_HITTING) {
        (*it)->SetTrigger();
      }
  }

  // Back objects (no deleteable)
  for (list<Object*>::iterator it = back_objects.begin() ; it != back_objects.end(); ++it) {
    Object* object = *it;
    if (object->GetActive()) {      
      switch (object->GetType()) {
        case OBJ_STATIC:
          ((StaticObject*)object)->StaticObjectStep();
          break;
        default:
          break;
      }
    }
  }

  // Blocks
  for (list<Block*>::iterator it = blocks.begin() ; it != blocks.end(); ++it) {
    Block* block = *it;
    if (block->GetState() == OBJ_STATE_DEAD) {
      delete block;
      it = blocks.erase(it);
    } else if (block->GetActive()) {
      block->ObjectStep(this, player);
    }
  }

  // Global objects
  for (list<Object*>::iterator it = objects.begin() ; it != objects.end(); ++it) {
    Object* object = *it;

    // REVISIT: to trigger some events. Remove this code
    if (player->GetState() == CHAR_STATE_HITTING) {
      if (object->GetType() == OBJ_HAZARD)
        ((Hazard*)object)->SetTrigger();
    }


    if (object->GetState() == OBJ_STATE_DEAD) {
      // REVISIT: need to add STATIC OBJECT here? Same for other objects that may persists (LASER)
      switch (object->GetType()) {
        case OBJ_ITEM:
          delete ((Item*)object);
          break;
        case OBJ_SHOOT:
          delete ((Shoot*)object);
          shoot_exists = false;
          break;
        case OBJ_BOMB:
          delete ((Bomb*)object);
          bomb_exists = false;
          break;
        default:
          //printf("[WARNING] Unknown object type to be deleted in World!\n");
          break;
      }
      
      it = objects.erase(it);                            // Remove element if it is dead.
    } else if (object->GetActive()) {
      switch (object->GetType()) {
        case OBJ_ITEM:
          ((Item*)object)->ObjectStep(this, player);
          break;
        case OBJ_STATIC:
          ((StaticObject*)object)->StaticObjectStep();
          break;
        case OBJ_HAZARD:
          ((Hazard*)object)->HazardStep(this, player);
          break;
        case OBJ_LASER:
          ((Laser*)object)->ObjectStep(this, player);
          break;
        case OBJ_SHOOT:
          ((Shoot*)object)->ObjectStep(this, player);
          break;
        case OBJ_BOMB:
          ((Bomb*)object)->ObjectStep(this, player);
          break;
        default:
          break;
      }
    } else {
      printf("Object inactive %d\n", object->GetId());
    }
  }


  // Handle checkpoints
  if (player->GetState() != CHAR_STATE_DYING) {
    for (vector<Checkpoint*>::iterator it = target_checkpoints->begin(); it != target_checkpoints->end(); it++) {
      Checkpoint* checkpoint = *it;
      if (checkpoint->InCheckpoint(player->GetPosX(), player->GetPosY(),
                                   player->GetWidth(), player->GetHeight())) {
        // player is in a target checkpoint. Move the current_checkpoint.
        current_checkpoint = checkpoint;
        // re-compute target_checkpoints
        target_checkpoints = current_checkpoint->GetNextCheckpoints();
        break;
      }
    }
  }

  // Handle triggers
  for (list<Trigger*>:: iterator it = triggers.begin(); it != triggers.end(); it++) {
    Trigger* trigger = *it;
    trigger->TriggerStep(player->GetPosX(), player->GetPosY(),
                         player->GetWidth(), player->GetHeight(),
                         player->GetDirection(), player->GetState());
  }

  // Handle enemies
  for (vector<Character*>::iterator it = enemies.begin(); it != enemies.end(); it++) {
    Enemy* enemy = (Enemy*)*it;
    enemy->CharacterStep(this, player);
  }

  // Check if player has been killed in this step
  // REVISIT: this check can be done at the begginning of this function and avoid
  // traversing some of the list. Triggers for instance is traversed two times.
  if (player->GetKilled()) {
    // If player got killed, then reset the triggers
    for (list<Trigger*>:: iterator it = triggers.begin(); it != triggers.end(); it++) {
      Trigger* trigger = *it;
      trigger->Reset();
    }

    this->ResetPlatforms();

    // Traverse some objects to reset them if required
    for (list<Object*>::iterator it = objects.begin() ; it != objects.end(); ++it) {
      Object* object = *it;
      if (object->GetType() == OBJ_LASER)
        ((Laser*)object)->Reset();
    }
  }
}

bool World::CreateNewShoot(int x, int y, int direction) {
  bool created = false;
  // Allow only one shoot to be created right now
  if (!shoot_exists) {
    Shoot* shoot = new Shoot("../designs/shoot/shoot.xml", x, y, 12, 6, direction);
    objects.push_back(shoot);
    shoot_exists = true;
    created = true;
  }

  return created;
}

bool World::CreateNewBomb(int x, int y, int direction) {
  bool created = false;
  // Allow only one bomb to be created right now
  if (!bomb_exists) {    
    Bomb* shoot = new Bomb("../designs/bomb/bomb.xml", x, y - 1, 25, 22, direction);
    // REVISIT: not sure why height is 16. May it be 17?
    shoot->SetBoundingBox(8, 10, 10, 13);
    objects.push_back(shoot);
    bomb_exists = true;
    created = true;
  }

  return created;
}

Platform* World::GetPlatform(int id) {
  for (vector<Platform*>::iterator it = platforms.begin() ; it != platforms.end(); ++it) {
    Platform* platform = *it;
    if (platform->GetTypeId() == id)
      return platform;
  }

  return nullptr;
}

Hazard* World::GetHazard(int id) {
  for (list<Object*>::iterator it = objects.begin() ; it != objects.end(); ++it) {
    Object* object = *it;

    if ((object->GetType() == OBJ_HAZARD) && (object->GetTypeId() == id))
      return (Hazard*)object;
  }

  return nullptr;
}

Laser* World::GetLaser(int id) {
  for (list<Object*>::iterator it = objects.begin() ; it != objects.end(); ++it) {
    Object* object = *it;

    if ((object->GetType() == OBJ_LASER) && (object->GetTypeId() == id))
      return (Laser*)object;
  }

  return nullptr;
}

CameraView* World::GetCurrentCameraView(Character* player) {
  int player_x;
  int player_y;
  int player_dir;
  CameraView* view;

  // REVISIT: at the moment, camera views are not taking into account vertical movements
  player_dir = player->GetFace();
  player_x   = player->GetPosX() + ((player_dir == CHAR_DIR_RIGHT) ? player->GetWidth() : 0);
  player_y   = player->GetPosY();

  view = nullptr;
  for (vector<CameraView*>::iterator it = camera_views.begin(); it != camera_views.end(); it++) {
    CameraView* view_to_analyze = *it;

    if( (player_x >= view_to_analyze->GetLeftUpX())   &&
        (player_x < view_to_analyze->GetRightDownX()) &&
        (player_y >= view_to_analyze->GetLeftUpY())   &&
        (player_y < view_to_analyze->GetRightDownY())) {
      if(!view) {
        view = view_to_analyze;
      } else {
        if (player_dir & CHAR_DIR_RIGHT) {
          if (view_to_analyze->GetLeftUpX() > view->GetLeftUpX())
            view = view_to_analyze;
        } else if (player_dir & CHAR_DIR_LEFT) {
          if (view_to_analyze->GetLeftUpX() < view->GetLeftUpX())
            view = view_to_analyze;
        }
      }
    }
  }

  return view;
}
